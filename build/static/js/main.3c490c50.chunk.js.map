{"version":3,"sources":["components/BibleSearch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["bible","BibleSearch","books","setBooks","useState","chapters","setChapters","searchParams","setSearchParams","results","setResults","useEffect","allBooks","Set","Object","keys","forEach","reference","book","split","add","Array","from","allChapters","startsWith","match","React","createElement","Box","sx","maxWidth","mx","p","Typography","variant","gutterBottom","Paper","mb","display","gap","flexWrap","TextField","label","value","keyword","onChange","e","target","minWidth","FormControl","InputLabel","Select","map","MenuItem","key","chapter","disabled","Button","onClick","handleSearch","searchResults","text","entries","RegExp","test","includes","bookMatch","chapterMatch","verseMatch","push","verse","List","length","index","ListItem","divider","ListItemText","primary","secondary","theme","createTheme","palette","mode","main","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3c490c50.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  Typography,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n} from '@mui/material';\nimport bibleData from '../data/bible.json';\nimport { BibleData, BibleVerse, SearchParams } from '../types/bible';\n\nconst bible = bibleData as BibleData;\n\nexport const BibleSearch: React.FC = () => {\n  const [books, setBooks] = useState<string[]>([]);\n  const [chapters, setChapters] = useState<string[]>([]);\n  const [searchParams, setSearchParams] = useState<SearchParams>({});\n  const [results, setResults] = useState<BibleVerse[]>([]);\n\n  useEffect(() => {\n    // 성경 책 이름 목록을 추출합니다\n    const allBooks = new Set<string>();\n    Object.keys(bible).forEach(reference => {\n      const book = reference.split(/\\d/)[0]; // 숫자가 나오기 전까지가 책 이름\n      allBooks.add(book);\n    });\n    setBooks(Array.from(allBooks));\n  }, []);\n\n  useEffect(() => {\n    if (searchParams.book) {\n      // 선택한 책의 장 목록을 추출합니다\n      const allChapters = new Set<string>();\n      Object.keys(bible).forEach(reference => {\n        if (reference.startsWith(searchParams.book || '')) {\n          const match = reference.match(/\\d+/);\n          if (match) {\n            allChapters.add(match[0]);\n          }\n        }\n      });\n      setChapters(Array.from(allChapters));\n    } else {\n      setChapters([]);\n    }\n  }, [searchParams.book]);\n\n  const handleSearch = () => {\n    const { keyword, book, chapter } = searchParams;\n    const searchResults: BibleVerse[] = [];\n\n    for (const [reference, text] of Object.entries(bible)) {\n      // 검색 조건에 맞는지 확인\n      if (book && !reference.startsWith(book)) continue;\n      \n      // 장 검색\n      if (chapter) {\n        const regex = new RegExp(`${book}${chapter}:`);\n        if (!regex.test(reference)) continue;\n      }\n      \n      // 키워드 검색\n      if (keyword && !text.includes(keyword)) continue;\n\n      // 참조 분석\n      const bookMatch = reference.split(/\\d/)[0];\n      const chapterMatch = reference.match(/\\d+/);\n      const verseMatch = reference.match(/:(\\d+)/);\n      \n      if (bookMatch && chapterMatch && verseMatch) {\n        searchResults.push({\n          book: bookMatch,\n          chapter: chapterMatch[0],\n          verse: verseMatch[1],\n          text: text,\n        });\n      }\n    }\n\n    setResults(searchResults);\n  };\n\n  return (\n    <Box sx={{ maxWidth: 800, mx: 'auto', p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        성경 검색\n      </Typography>\n      \n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n          <TextField\n            label=\"검색어\"\n            value={searchParams.keyword || ''}\n            onChange={(e) => setSearchParams({ ...searchParams, keyword: e.target.value })}\n            sx={{ minWidth: 200 }}\n          />\n          \n          <FormControl sx={{ minWidth: 200 }}>\n            <InputLabel>책</InputLabel>\n            <Select\n              value={searchParams.book || ''}\n              label=\"책\"\n              onChange={(e) => setSearchParams({ ...searchParams, book: e.target.value })}\n            >\n              {books.map((book) => (\n                <MenuItem key={book} value={book}>\n                  {book}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <FormControl sx={{ minWidth: 200 }}>\n            <InputLabel>장</InputLabel>\n            <Select\n              value={searchParams.chapter || ''}\n              label=\"장\"\n              onChange={(e) => setSearchParams({ ...searchParams, chapter: e.target.value })}\n              disabled={!searchParams.book}\n            >\n              {chapters.map((chapter) => (\n                <MenuItem key={chapter} value={chapter}>\n                  {chapter}장\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <Button variant=\"contained\" onClick={handleSearch}>\n            검색\n          </Button>\n        </Box>\n      </Paper>\n\n      <Paper>\n        <List>\n          {results.length > 0 ? (\n            results.map((verse, index) => (\n              <ListItem key={index} divider>\n                <ListItemText\n                  primary={`${verse.book} ${verse.chapter}장 ${verse.verse}절`}\n                  secondary={verse.text}\n                />\n              </ListItem>\n            ))\n          ) : (\n            <ListItem>\n              <ListItemText primary=\"검색 결과가 없습니다. 다른 검색어를 입력해보세요.\" />\n            </ListItem>\n          )}\n        </List>\n      </Paper>\n    </Box>\n  );\n}; ","import React from 'react';\nimport { CssBaseline, ThemeProvider, createTheme } from '@mui/material';\nimport { BibleSearch } from './components/BibleSearch';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'light',\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <BibleSearch />\n    </ThemeProvider>\n  );\n}\n\nexport default App; ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); "],"sourceRoot":""}